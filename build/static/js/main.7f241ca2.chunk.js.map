{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/CardFilter.js","Components/Button.js","Components/Scroll.js","Components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","mass","films","height","gender","planet","species","starships","vehicules","birth_year","handleClick","className","src","alt","onClick","e","CardList","characters","map","character","i","key","homeworld","length","vehicles","CardFilter","searchChange","onChange","type","placeholder","Button","handleClickEvent","Scroll","children","Modal","handleClose","population","climate","diameter","terrain","App","handleSearchChange","setState","searchField","target","value","state","next","fetch","then","response","json","rs","concat","results","this","filteredcharacters","filter","toLowerCase","includes","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7f241ca2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ \n        id,\n        name, \n        mass, \n        films, \n        height, \n        gender, \n        planet,\n        species, \n        starships, \n        vehicules, \n        birth_year,\n        handleClick \n    }) => {\n\n    return(\n        <div className = \"card\">\n            <div className = \"top-part\">\n                <div className = \"text-info\">\n                    <span className = \"icon person-icon\"></span>\n                    <span>{ name }</span>\n                </div>\n                <div className = \"text-info\">\n                    <span className = \"weight-icon icon\"></span>\n                    <span>{ mass } Kg</span>\n                </div>\n                <div className = \"text-info\">\n                    <span className = \"ruler-icon icon\"></span>\n                    <span>{ height }</span> M\n                </div>\n                <div className = \"text-info\">\n                    <span className = \"baby-icon icon\"></span>\n                    <span>{ birth_year }</span>\n                </div>\n                <div className = \"text-info\">\n                    <span className = \"gender-icon icon\"></span>\n                    <span>{ gender }</span>\n                </div>\n            </div>\n            <div className=\"center-part\">\n                <img \n                    className =\"profile-img\" \n                    src = { `https://robohash.org/${ id }?200x200&set=set2` } \n                    alt = { name } />\n            </div>\n            <div className=\"bottom-part\">\n                <ul className=\"owner-ship\">\n                    <h4>Owns:</h4>\n                    <li>{ films } Films</li>\n                    <li>{ vehicules } Vehicules</li>\n                    <li>{ starships } StarShips</li>\n                    <li>{ species } Species</li>\n                </ul>\n                <div className=\"planet\" onClick = { (e) => {\n                    handleClick( planet );\n                }}>\n                    <span className=\"planet-icon\"></span>\n                    <span className=\"planet-text\">Planet Home</span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ characters, handleClick }) => {\n    return (\n        <div className=\"content\">\n            {\n                characters.map(( character, i ) => {\n                    return (\n                        <Card\n                            key         = { i }\n                            id          = { character.name }\n                            name        = { character.name } \n                            mass        = { character.mass } \n                            planet      = { character.homeworld }\n                            height      = { character.height }\n                            birth_year  = { character.birth_year }\n                            gender      = { character.gender }\n                            films       = { character.films.length }\n                            vehicules   = { character.vehicles.length }\n                            species     = { character.species.length }\n                            starships   = { character.starships.length }\n                            handleClick = { handleClick }\n                        />\n                    )\n                })\n\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst CardFilter = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"filter\"\n        onChange={ searchChange }\n        type=\"text\"\n        placeholder=\"search for a person ...\" \n      />\n    </div>\n  );\n}\n\nexport default CardFilter;\n","import React from 'react';\n\nconst Button = ({ handleClickEvent }) => {\n    return (\n        <div className = \"button\">\n            <button id = \"nextList\" onClick = { handleClickEvent }></button>\n        </div>\n    );\n}\n\n\nexport default Button;","import React from 'react';\nimport Button from './Button';\n\nconst Scroll = ({ handleClickEvent, children }) => {\n    return (\n        <div className=\"scroll\">\n            {children}\n            <Button handleClickEvent = { handleClickEvent } />\n        </div>\n    );\n}\n\nexport default Scroll;","import React from 'react';\n\nconst Modal = ({ handleClose, planet }) => {\n    let { name, population, climate, diameter, terrain } = planet;\n\n    return (\n        <div className=\"modal\">\n            <div className=\"modal-content\">\n                <div className=\"modal-header\">\n                    <span className=\"close\" onClick={ handleClose }>&times;</span>\n                </div>\n                <div className=\"modal-body\">\n                    <h2>Planet Name: { name }</h2>\n                    <div className=\"planet-info\">\n                        <span>Population: { population }</span>\n                        <span>Climate: { climate }</span>\n                        <span>Diameter: { diameter } KM</span>\n                        <span>Terrain: { terrain }</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Modal;\n\n","import React, { Component} from 'react';\nimport CardList from './Components/CardList';\nimport CardFilter from './Components/CardFilter';\nimport Scroll from './Components/Scroll';\nimport Modal from './Components/Modal';\n\nclass App extends Component{\n    constructor(){\n        super();\n\n        this.state = {\n            next         : true,\n            characters   : [],\n            searchField  : '',\n            planet       : null\n        }\n    }\n\n    handleSearchChange = ( e ) => {\n        this.setState({ searchField: e.target.value });\n    }\n\n    handleClickEvent = ( ) => {\n        if( this.state.next ){\n            fetch( this.state.next )\n            .then( response => response.json() )\n            .then( rs => {\n                this.setState({ \n                  characters: this.state.characters.concat( rs.results ),\n                  next: rs.next \n                });\n            })\n        }\n    }\n\n    handleClick = ( planet ) => {\n        fetch( planet )\n            .then( response => response.json() )\n            .then( rs => {\n                this.setState({ planet: rs });\n            });\n    }\n\n    handleClose = () => {\n      this.setState({ planet: null });\n    }\n\n    componentWillMount() {\n        fetch( 'https://swapi.co/api/people' )\n            .then( response => response.json() )\n            .then( rs => {\n                this.setState({ characters: rs.results, next: rs.next });\n            })\n    }\n  \n    render(){\n        const { characters, searchField, planet } = this.state;\n        const filteredcharacters = characters.filter(character => {\n            return character.name.toLowerCase().includes(\n                searchField.toLowerCase()\n            )\n        })\n\n        return !characters.length ? \n            <h1 className=\"center\">Loading...</h1> : \n        (\n            <div className = \"container\">\n                <div className = \"header\">\n                    <div className=\"title\">\n                        <span className = \"crowd-icon\"></span>\n                        <h1>Star Wars Characters</h1>\n                    </div>\n                    <CardFilter searchChange = { this.handleSearchChange } />\n                </div>\n                <Scroll handleClickEvent = { this.handleClickEvent } >\n                    <CardList \n                        handleClick = { this.handleClick }\n                        characters = { filteredcharacters } />\n                </Scroll>\n                    { !planet ? null : \n                        (\n                            <Modal \n                                handleClose = { this.handleClose } \n                                planet = { planet } \n                                />\n                        )\n                    }                \n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}